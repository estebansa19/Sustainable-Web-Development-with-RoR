1. Why This Book Exists:
  - ¿Por qué sustainable? Un software que puede ser sostenible en el tiempo, que puede ser 
    modificado por muchos desarrolladores paulatinamente, que los cambios son fáciles de realizar, 
    es un software sostenible y escalable.

  - ¿Por qué deberíamos preocuparnos por esto? El software existe debido a una necesidad de la vida 
    real, si esta necesidad persiste, el software debe persistir también. Debe refinarse de manera
    continua ya que la propia necesidad debe irse refinando. 

    Construir software que sea sostenible es más mantenible en respecto a dinero también, 
    desarrollar software es demasiado caro, por ende, desarrollar un buen software nos va a ahorrar
    dinero.

    Además, es más ameno para el desarrollador trabajar en un buen codebase.

  - ¿Cómo valorar esta sostenibilidad? Esto depende mucho de la visión de producto que tenga la 
    empresa, porque de acuerdo a esto se pueden tomar decisiones que cambien el rumbo del producto
    tecnológico que tenemos

  - Assumptions del libro:
    * El software tiene un propósito claro (a menos que sea con fines de discoveries o prototipado)
    * El software necesita existir por años
    * El software evolucionará
    * El equipo de desarrollo cambiará
    * Valoramos la sostenibilidad, consistencia y calidad
      a) Sostenibilidad.
      b) Consistencia: que las soluciones que le damos a problemas en nuestro codebase sean 
        consistentes, las preferencias personales no entran en este ecuación.
      c) Calidad: que las cosas estén bien hechas desde el comienzo pero sin un over-engineering.
  
  - Oportunity Cost: son oportunidades que tenemos de mejorar puntos de dolor de nuestra 
    aplicación.

  - Carrying Cost: es el costo que estamos pagando por trabajar en un Opportunity Cost.

2. The Rails Application Architecture:
  El autor nos plantea que hay 4 agrupaciones de los componenentes de los cuales hace parte una 
  Rails app

  • Boundaries, que son quienes normalmente reciben un input, ejecutan cierta lógica de negocio y 
    luego se las arreglan para que se envíe o renderice un input. (Controllers, Mailers, Jobs, 
    ActiveStorage, etc)
  • Views, que son quienes muestran la información: HTML, ERB, JS Packs, CSS, JBuilder, etc.
  • Models, que son nuestras clases de ActiveRecord para interacturar con la DB.
  • Everything else.

  Ventajas de usar esta estructura:
    Que ya gran parte de las decisiones de arquitectura fueron tomadas y a la hora de empezar un 
    proyecto tenemos una plantilla de la cual partir.

  Desventajas de usar esta estructura:
    • Está diseñada para apps que tenga una DB.
    • Rails nunca nos dice dónde debería ir la lógica de negocio.

3. Following Along in This Book:
  Este capítulo es una guía para entender cómo está escrito el libro y las convenciones que usa.

4. Start Your App Off Right:
  rails new es demasiado poderoso pero si queremos crear una aplicación con las características de 
  una app sustainable, debemos hacer algunos ajustes enfocados al developer workflow (flujo de 
  rabajo desde el setup hasta continuous deployment).

  El primer cambio que se hará para tener una app sustainable es borrar el database.yml y el 
  credentials.yml y manejar estas runtime variables con dotenv.

  El segundo cambio es manejar scripts en lugar de documentación, estos scripts serán conformados por:

  - un script de inicialización del proyecto. bin/setup
  - un script para ejecutar el proyecto. bin/run
  - un script para ejecutar todas las pruebas y checks del proyecto. bin/ci

5. Business Logic (Does Not Go in Active Records):
  Hay algo para lo cual Rails no nos tiene una respuesta certera y es dónde poner  la lógica de 
  negocio.

  Aparte de la complejidad que nos trae la lógica de negocios, esto puede hacerse más complejo aún 
  por las decisiones que tomemos. La complejidad propia de nuestro modelo de negocios se denomina 
  como: "complejidad necesaria o esencial", la complejidad que añadimos nosotros con nuestras 
  decisiones se denomina como: "complejidad innecesaria o accidental".

  Para empeorar las cosas, esta parte de la lógica de negocio tiene mucha complejidad y tiene una 
  alta taza de frecuencia de cambio.  

  Se definen 2 métricas en estos casos:

  1. fan-in: la cantidad de veces en que el comportamiento de un objeto es llamado.
  2. fan-out: la capacidad que tiene un objeto para usar el comportamiento de otro objeto.

  Moviendo la lógica de los modelos a clases en específico que solamente estén encargadas de esta 
  funcionalidad, logramos evitar tener ese código complejo y que es demasiado propenso a camiar en 
  clases principales de nuestra aplicación.
